#! /bin/sh
### BEGIN INIT INFO
# Provides:          os-event-catcher
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Should-Start:      mysql postgresql rabbitmq-server keystone neutron-server
# Should-Stop:       mysql postgresql rabbitmq-server keystone neutron-server
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: os-event-catcher
# Description:       Catches OpenStack Events
### END INIT INFO

export PATH=/sbin:/usr/sbin:/bin:/usr/bin:/opt/enovance/os-event-catcher
DESC="OpenStack Event Catcher"
NAME=os-event-catcher
DAEMON=/opt/enovance/os-event-catcher/${NAME}
PIDFILE=/var/run/openstack/${NAME}.pid
SCRIPTNAME=/etc/init.d/${NAME}
LOGFILE=/var/log/openstack/os-event-catcher.log
DAEMON_DIR=/var/run
DAEMON_ARGS="--log-file=$LOGFILE --config-file=/opt/enovance/os-event-catcher/os_event_catcher.conf"

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

. /lib/lsb/init-functions

make_openstack_folder () {
  if [ ! -e ${1} ] ; then
    mkdir -p ${1}
    if [ ! -d ${1} ] ; then
      echo "${1} folder cannot be created: exiting!"
      exit 1
    fi
    chown nova:nova ${1}
  fi
}
for i in /var/run/openstack /var/log/openstack ; do
  make_openstack_folder ${i}
done

do_start () {
  start-stop-daemon --start --quiet --background --chuid nova:nova --chdir $DAEMON_DIR --make-pidfile --pidfile $PIDFILE --startas $DAEMON --test > /dev/null \
    || return 1
  start-stop-daemon --start --quiet --background --chuid nova:nova --chdir $DAEMON_DIR --make-pidfile --pidfile $PIDFILE --startas $DAEMON -- \
    $DAEMON_ARGS \
    || return 2
}

do_stop () {
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
  RETVAL="$?"
  rm -f $PIDFILE
  return "$RETVAL"
}

case "$1" in
start)
  log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) log_end_msg 0 ;;
    2) log_end_msg 1 ;;
  esac
;;
stop)
  log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) log_end_msg 0 ;;
    *) log_end_msg 1 ;;
  esac
;;
restart|force-reload)
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
  0|1)
    do_start
    case "$?" in
    0) log_end_msg 0 ;;
    1) log_end_msg 1 ;; # Old process is still running
    *) log_end_msg 1 ;; # Failed to start
    esac
  ;;
  *)
    # Failed to stop
    log_end_msg 1
    ;;
  esac
;;
status)
  status_of_proc -p $PIDFILE $DAEMON os-event-catcher && exit 0 || exit $?
;;
*)
  log_action_msg "Usage: /etc/init.d/os-event-catcher {start|stop|restart|force-reload|status}"
  exit 1
;;
esac

exit 0
